# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: query_root
    subscription: subscription_root
}

"whether this query should be cached (Hasura Cloud only)"
directive @cached(
    "refresh the cache entry"
    refresh: Boolean! = false,
    "measured in seconds"
    ttl: Int! = 60
) on QUERY

"Live arb capacities for every arb pair"
type arb_v1 {
    amount_bridge: float8
    amount_in: float8
    amount_out: float8
    "A computed field, amount_out - amount_in"
    amount_win: float8
    bridge(
        "JSON select path"
        path: String
    ): jsonb
    dex_0: String!
    dex_1: String!
    id: String!
    last_ts: timestamp
    route_0(
        "JSON select path"
        path: String
    ): jsonb
    route_1(
        "JSON select path"
        path: String
    ): jsonb
    token_0: String!
    token_1: String!
    ts: timestamp
}

type query_root {
    "fetch data from the table: \"arb_v1\""
    arb_v1(
        "distinct select on columns"
        distinct_on: [arb_v1_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [arb_v1_order_by!],
        "filter the rows returned"
        where: arb_v1_bool_exp
    ): [arb_v1!]!
    "fetch data from the table: \"arb_v1\" using primary key columns"
    arb_v1_by_pk(id: String!): arb_v1
}

type subscription_root {
    "fetch data from the table: \"arb_v1\""
    arb_v1(
        "distinct select on columns"
        distinct_on: [arb_v1_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [arb_v1_order_by!],
        "filter the rows returned"
        where: arb_v1_bool_exp
    ): [arb_v1!]!
    "fetch data from the table: \"arb_v1\" using primary key columns"
    arb_v1_by_pk(id: String!): arb_v1
    "fetch data from the table in a streaming manner: \"arb_v1\""
    arb_v1_stream(
        "maximum number of rows returned in a single batch"
        batch_size: Int!,
        "cursor to stream the results returned by the query"
        cursor: [arb_v1_stream_cursor_input]!,
        "filter the rows returned"
        where: arb_v1_bool_exp
    ): [arb_v1!]!
}

"select columns of table \"arb_v1\""
enum arb_v1_select_column {
    "column name"
    amount_bridge
    "column name"
    amount_in
    "column name"
    amount_out
    "column name"
    bridge
    "column name"
    dex_0
    "column name"
    dex_1
    "column name"
    id
    "column name"
    last_ts
    "column name"
    route_0
    "column name"
    route_1
    "column name"
    token_0
    "column name"
    token_1
    "column name"
    ts
}

"ordering argument of a cursor"
enum cursor_ordering {
    "ascending ordering of the cursor"
    ASC
    "descending ordering of the cursor"
    DESC
}

"column ordering options"
enum order_by {
    "in ascending order, nulls last"
    asc
    "in ascending order, nulls first"
    asc_nulls_first
    "in ascending order, nulls last"
    asc_nulls_last
    "in descending order, nulls first"
    desc
    "in descending order, nulls first"
    desc_nulls_first
    "in descending order, nulls last"
    desc_nulls_last
}

scalar float8

scalar jsonb

scalar timestamp

"Boolean expression to compare columns of type \"String\". All fields are combined with logical 'AND'."
input String_comparison_exp {
    _eq: String
    _gt: String
    _gte: String
    "does the column match the given case-insensitive pattern"
    _ilike: String
    _in: [String!]
    "does the column match the given POSIX regular expression, case insensitive"
    _iregex: String
    _is_null: Boolean
    "does the column match the given pattern"
    _like: String
    _lt: String
    _lte: String
    _neq: String
    "does the column NOT match the given case-insensitive pattern"
    _nilike: String
    _nin: [String!]
    "does the column NOT match the given POSIX regular expression, case insensitive"
    _niregex: String
    "does the column NOT match the given pattern"
    _nlike: String
    "does the column NOT match the given POSIX regular expression, case sensitive"
    _nregex: String
    "does the column NOT match the given SQL regular expression"
    _nsimilar: String
    "does the column match the given POSIX regular expression, case sensitive"
    _regex: String
    "does the column match the given SQL regular expression"
    _similar: String
}

"Boolean expression to filter rows from the table \"arb_v1\". All fields are combined with a logical 'AND'."
input arb_v1_bool_exp {
    _and: [arb_v1_bool_exp!]
    _not: arb_v1_bool_exp
    _or: [arb_v1_bool_exp!]
    amount_bridge: float8_comparison_exp
    amount_in: float8_comparison_exp
    amount_out: float8_comparison_exp
    amount_win: float8_comparison_exp
    bridge: jsonb_comparison_exp
    dex_0: String_comparison_exp
    dex_1: String_comparison_exp
    id: String_comparison_exp
    last_ts: timestamp_comparison_exp
    route_0: jsonb_comparison_exp
    route_1: jsonb_comparison_exp
    token_0: String_comparison_exp
    token_1: String_comparison_exp
    ts: timestamp_comparison_exp
}

"Ordering options when selecting data from \"arb_v1\"."
input arb_v1_order_by {
    amount_bridge: order_by
    amount_in: order_by
    amount_out: order_by
    amount_win: order_by
    bridge: order_by
    dex_0: order_by
    dex_1: order_by
    id: order_by
    last_ts: order_by
    route_0: order_by
    route_1: order_by
    token_0: order_by
    token_1: order_by
    ts: order_by
}

"Streaming cursor of the table \"arb_v1\""
input arb_v1_stream_cursor_input {
    "Stream column input with initial value"
    initial_value: arb_v1_stream_cursor_value_input!
    "cursor ordering"
    ordering: cursor_ordering
}

"Initial value of the column from where the streaming should start"
input arb_v1_stream_cursor_value_input {
    amount_bridge: float8
    amount_in: float8
    amount_out: float8
    bridge: jsonb
    dex_0: String
    dex_1: String
    id: String
    last_ts: timestamp
    route_0: jsonb
    route_1: jsonb
    token_0: String
    token_1: String
    ts: timestamp
}

"Boolean expression to compare columns of type \"float8\". All fields are combined with logical 'AND'."
input float8_comparison_exp {
    _eq: float8
    _gt: float8
    _gte: float8
    _in: [float8!]
    _is_null: Boolean
    _lt: float8
    _lte: float8
    _neq: float8
    _nin: [float8!]
}

input jsonb_cast_exp {
    String: String_comparison_exp
}

"Boolean expression to compare columns of type \"jsonb\". All fields are combined with logical 'AND'."
input jsonb_comparison_exp {
    _cast: jsonb_cast_exp
    "is the column contained in the given json value"
    _contained_in: jsonb
    "does the column contain the given json value at the top level"
    _contains: jsonb
    _eq: jsonb
    _gt: jsonb
    _gte: jsonb
    "does the string exist as a top-level key in the column"
    _has_key: String
    "do all of these strings exist as top-level keys in the column"
    _has_keys_all: [String!]
    "do any of these strings exist as top-level keys in the column"
    _has_keys_any: [String!]
    _in: [jsonb!]
    _is_null: Boolean
    _lt: jsonb
    _lte: jsonb
    _neq: jsonb
    _nin: [jsonb!]
}

"Boolean expression to compare columns of type \"timestamp\". All fields are combined with logical 'AND'."
input timestamp_comparison_exp {
    _eq: timestamp
    _gt: timestamp
    _gte: timestamp
    _in: [timestamp!]
    _is_null: Boolean
    _lt: timestamp
    _lte: timestamp
    _neq: timestamp
    _nin: [timestamp!]
}
