# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: query_root
    mutation: mutation_root
    subscription: subscription_root
}

"whether this query should be cached (Hasura Cloud only)"
directive @cached(
    "refresh the cache entry"
    refresh: Boolean! = false,
    "measured in seconds"
    ttl: Int! = 60
) on QUERY

"The balances for clients trade by the shadbot"
type bot_balances {
    balances(
        "JSON select path"
        path: String
    ): json!
    bot_id: uuid!
    chain_id: String!
    id: Int!
}

"aggregated selection of \"bot_balances\""
type bot_balances_aggregate {
    aggregate: bot_balances_aggregate_fields
    nodes: [bot_balances!]!
}

"aggregate fields of \"bot_balances\""
type bot_balances_aggregate_fields {
    avg: bot_balances_avg_fields
    count(columns: [bot_balances_select_column!], distinct: Boolean): Int!
    max: bot_balances_max_fields
    min: bot_balances_min_fields
    stddev: bot_balances_stddev_fields
    stddev_pop: bot_balances_stddev_pop_fields
    stddev_samp: bot_balances_stddev_samp_fields
    sum: bot_balances_sum_fields
    var_pop: bot_balances_var_pop_fields
    var_samp: bot_balances_var_samp_fields
    variance: bot_balances_variance_fields
}

"aggregate avg on columns"
type bot_balances_avg_fields {
    id: Float
}

"aggregate max on columns"
type bot_balances_max_fields {
    bot_id: uuid
    chain_id: String
    id: Int
}

"aggregate min on columns"
type bot_balances_min_fields {
    bot_id: uuid
    chain_id: String
    id: Int
}

"response of any mutation on the table \"bot_balances\""
type bot_balances_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [bot_balances!]!
}

"aggregate stddev on columns"
type bot_balances_stddev_fields {
    id: Float
}

"aggregate stddev_pop on columns"
type bot_balances_stddev_pop_fields {
    id: Float
}

"aggregate stddev_samp on columns"
type bot_balances_stddev_samp_fields {
    id: Float
}

"aggregate sum on columns"
type bot_balances_sum_fields {
    id: Int
}

"aggregate var_pop on columns"
type bot_balances_var_pop_fields {
    id: Float
}

"aggregate var_samp on columns"
type bot_balances_var_samp_fields {
    id: Float
}

"aggregate variance on columns"
type bot_balances_variance_fields {
    id: Float
}

"arb bot "
type bot_v1 {
    id: uuid!
    name: String!
    reported_status: String
    supervisor_reported_ts:timestamptz!
    pnl: numeric
    status: Boolean!
}

"aggregated selection of \"bot_v1\""
type bot_v1_aggregate {
    aggregate: bot_v1_aggregate_fields
    nodes: [bot_v1!]!
}

"aggregate fields of \"bot_v1\""
type bot_v1_aggregate_fields {
    avg: bot_v1_avg_fields
    count(columns: [bot_v1_select_column!], distinct: Boolean): Int!
    max: bot_v1_max_fields
    min: bot_v1_min_fields
    stddev: bot_v1_stddev_fields
    stddev_pop: bot_v1_stddev_pop_fields
    stddev_samp: bot_v1_stddev_samp_fields
    sum: bot_v1_sum_fields
    var_pop: bot_v1_var_pop_fields
    var_samp: bot_v1_var_samp_fields
    variance: bot_v1_variance_fields
}

"aggregate avg on columns"
type bot_v1_avg_fields {
    pnl: Float
}

"aggregate max on columns"
type bot_v1_max_fields {
    id: uuid
    name: String
    pnl: numeric
}

"aggregate min on columns"
type bot_v1_min_fields {
    id: uuid
    name: String
    pnl: numeric
}

"response of any mutation on the table \"bot_v1\""
type bot_v1_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [bot_v1!]!
}

"aggregate stddev on columns"
type bot_v1_stddev_fields {
    pnl: Float
}

"aggregate stddev_pop on columns"
type bot_v1_stddev_pop_fields {
    pnl: Float
}

"aggregate stddev_samp on columns"
type bot_v1_stddev_samp_fields {
    pnl: Float
}

"aggregate sum on columns"
type bot_v1_sum_fields {
    pnl: numeric
}

"aggregate var_pop on columns"
type bot_v1_var_pop_fields {
    pnl: Float
}

"aggregate var_samp on columns"
type bot_v1_var_samp_fields {
    pnl: Float
}

"aggregate variance on columns"
type bot_v1_variance_fields {
    pnl: Float
}

"mutation root"
type mutation_root {
    "delete data from the table: \"bot_balances\""
    delete_bot_balances(
        "filter the rows which have to be deleted"
        where: bot_balances_bool_exp!
    ): bot_balances_mutation_response
    "delete single row from the table: \"bot_balances\""
    delete_bot_balances_by_pk(id: Int!): bot_balances
    "delete data from the table: \"bot_v1\""
    delete_bot_v1(
        "filter the rows which have to be deleted"
        where: bot_v1_bool_exp!
    ): bot_v1_mutation_response
    "delete single row from the table: \"bot_v1\""
    delete_bot_v1_by_pk(id: uuid!): bot_v1
    "delete data from the table: \"runs\""
    delete_runs(
        "filter the rows which have to be deleted"
        where: runs_bool_exp!
    ): runs_mutation_response
    "delete single row from the table: \"runs\""
    delete_runs_by_pk(id: Int!): runs
    "insert data into the table: \"bot_balances\""
    insert_bot_balances(
        "the rows to be inserted"
        objects: [bot_balances_insert_input!]!,
        "upsert condition"
        on_conflict: bot_balances_on_conflict
    ): bot_balances_mutation_response
    "insert a single row into the table: \"bot_balances\""
    insert_bot_balances_one(
        "the row to be inserted"
        object: bot_balances_insert_input!,
        "upsert condition"
        on_conflict: bot_balances_on_conflict
    ): bot_balances
    "insert data into the table: \"bot_v1\""
    insert_bot_v1(
        "the rows to be inserted"
        objects: [bot_v1_insert_input!]!,
        "upsert condition"
        on_conflict: bot_v1_on_conflict
    ): bot_v1_mutation_response
    "insert a single row into the table: \"bot_v1\""
    insert_bot_v1_one(
        "the row to be inserted"
        object: bot_v1_insert_input!,
        "upsert condition"
        on_conflict: bot_v1_on_conflict
    ): bot_v1
    "insert data into the table: \"runs\""
    insert_runs(
        "the rows to be inserted"
        objects: [runs_insert_input!]!,
        "upsert condition"
        on_conflict: runs_on_conflict
    ): runs_mutation_response
    "insert a single row into the table: \"runs\""
    insert_runs_one(
        "the row to be inserted"
        object: runs_insert_input!,
        "upsert condition"
        on_conflict: runs_on_conflict
    ): runs
    "update data of the table: \"bot_balances\""
    update_bot_balances(
        "increments the numeric columns with given value of the filtered values"
        _inc: bot_balances_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: bot_balances_set_input,
        "filter the rows which have to be updated"
        where: bot_balances_bool_exp!
    ): bot_balances_mutation_response
    "update single row of the table: \"bot_balances\""
    update_bot_balances_by_pk(
        "increments the numeric columns with given value of the filtered values"
        _inc: bot_balances_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: bot_balances_set_input,
        pk_columns: bot_balances_pk_columns_input!
    ): bot_balances
    "update multiples rows of table: \"bot_balances\""
    update_bot_balances_many(
        "updates to execute, in order"
        updates: [bot_balances_updates!]!
    ): [bot_balances_mutation_response]
    "update data of the table: \"bot_v1\""
    update_bot_v1(
        "increments the numeric columns with given value of the filtered values"
        _inc: bot_v1_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: bot_v1_set_input,
        "filter the rows which have to be updated"
        where: bot_v1_bool_exp!
    ): bot_v1_mutation_response
    "update single row of the table: \"bot_v1\""
    update_bot_v1_by_pk(
        "increments the numeric columns with given value of the filtered values"
        _inc: bot_v1_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: bot_v1_set_input,
        pk_columns: bot_v1_pk_columns_input!
    ): bot_v1
    "update multiples rows of table: \"bot_v1\""
    update_bot_v1_many(
        "updates to execute, in order"
        updates: [bot_v1_updates!]!
    ): [bot_v1_mutation_response]
    "update data of the table: \"runs\""
    update_runs(
        "append existing jsonb value of filtered columns with new jsonb value"
        _append: runs_append_input,
        "delete the field or element with specified path (for JSON arrays, negative integers count from the end)"
        _delete_at_path: runs_delete_at_path_input,
        "delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array"
        _delete_elem: runs_delete_elem_input,
        "delete key/value pair or string element. key/value pairs are matched based on their key value"
        _delete_key: runs_delete_key_input,
        "increments the numeric columns with given value of the filtered values"
        _inc: runs_inc_input,
        "prepend existing jsonb value of filtered columns with new jsonb value"
        _prepend: runs_prepend_input,
        "sets the columns of the filtered rows to the given values"
        _set: runs_set_input,
        "filter the rows which have to be updated"
        where: runs_bool_exp!
    ): runs_mutation_response
    "update single row of the table: \"runs\""
    update_runs_by_pk(
        "append existing jsonb value of filtered columns with new jsonb value"
        _append: runs_append_input,
        "delete the field or element with specified path (for JSON arrays, negative integers count from the end)"
        _delete_at_path: runs_delete_at_path_input,
        "delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array"
        _delete_elem: runs_delete_elem_input,
        "delete key/value pair or string element. key/value pairs are matched based on their key value"
        _delete_key: runs_delete_key_input,
        "increments the numeric columns with given value of the filtered values"
        _inc: runs_inc_input,
        "prepend existing jsonb value of filtered columns with new jsonb value"
        _prepend: runs_prepend_input,
        "sets the columns of the filtered rows to the given values"
        _set: runs_set_input,
        pk_columns: runs_pk_columns_input!
    ): runs
    "update multiples rows of table: \"runs\""
    update_runs_many(
        "updates to execute, in order"
        updates: [runs_updates!]!
    ): [runs_mutation_response]
}

type query_root {
    "fetch data from the table: \"bot_balances\""
    bot_balances(
        "distinct select on columns"
        distinct_on: [bot_balances_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [bot_balances_order_by!],
        "filter the rows returned"
        where: bot_balances_bool_exp
    ): [bot_balances!]!
    "fetch aggregated fields from the table: \"bot_balances\""
    bot_balances_aggregate(
        "distinct select on columns"
        distinct_on: [bot_balances_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [bot_balances_order_by!],
        "filter the rows returned"
        where: bot_balances_bool_exp
    ): bot_balances_aggregate!
    "fetch data from the table: \"bot_balances\" using primary key columns"
    bot_balances_by_pk(id: Int!): bot_balances
    "fetch data from the table: \"bot_v1\""
    bot_v1(
        "distinct select on columns"
        distinct_on: [bot_v1_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [bot_v1_order_by!],
        "filter the rows returned"
        where: bot_v1_bool_exp
    ): [bot_v1!]!
    "fetch aggregated fields from the table: \"bot_v1\""
    bot_v1_aggregate(
        "distinct select on columns"
        distinct_on: [bot_v1_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [bot_v1_order_by!],
        "filter the rows returned"
        where: bot_v1_bool_exp
    ): bot_v1_aggregate!
    "fetch data from the table: \"bot_v1\" using primary key columns"
    bot_v1_by_pk(id: uuid!): bot_v1
    "fetch data from the table: \"runs\""
    runs(
        "distinct select on columns"
        distinct_on: [runs_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [runs_order_by!],
        "filter the rows returned"
        where: runs_bool_exp
    ): [runs!]!
    "fetch aggregated fields from the table: \"runs\""
    runs_aggregate(
        "distinct select on columns"
        distinct_on: [runs_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [runs_order_by!],
        "filter the rows returned"
        where: runs_bool_exp
    ): runs_aggregate!
    "fetch data from the table: \"runs\" using primary key columns"
    runs_by_pk(id: Int!): runs
}

"Log runs"
type runs {
    arb(
        "JSON select path"
        path: String
    ): jsonb!
    bot_id: uuid!
    created_at: timestamptz!
    id: Int!
    ops(
        "JSON select path"
        path: String
    ): jsonb!
    updated_at: timestamptz!
}

"aggregated selection of \"runs\""
type runs_aggregate {
    aggregate: runs_aggregate_fields
    nodes: [runs!]!
}

"aggregate fields of \"runs\""
type runs_aggregate_fields {
    avg: runs_avg_fields
    count(columns: [runs_select_column!], distinct: Boolean): Int!
    max: runs_max_fields
    min: runs_min_fields
    stddev: runs_stddev_fields
    stddev_pop: runs_stddev_pop_fields
    stddev_samp: runs_stddev_samp_fields
    sum: runs_sum_fields
    var_pop: runs_var_pop_fields
    var_samp: runs_var_samp_fields
    variance: runs_variance_fields
}

"aggregate avg on columns"
type runs_avg_fields {
    id: Float
}

"aggregate max on columns"
type runs_max_fields {
    bot_id: uuid
    created_at: timestamptz
    id: Int
    updated_at: timestamptz
}

"aggregate min on columns"
type runs_min_fields {
    bot_id: uuid
    created_at: timestamptz
    id: Int
    updated_at: timestamptz
}

"response of any mutation on the table \"runs\""
type runs_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [runs!]!
}

"aggregate stddev on columns"
type runs_stddev_fields {
    id: Float
}

"aggregate stddev_pop on columns"
type runs_stddev_pop_fields {
    id: Float
}

"aggregate stddev_samp on columns"
type runs_stddev_samp_fields {
    id: Float
}

"aggregate sum on columns"
type runs_sum_fields {
    id: Int
}

"aggregate var_pop on columns"
type runs_var_pop_fields {
    id: Float
}

"aggregate var_samp on columns"
type runs_var_samp_fields {
    id: Float
}

"aggregate variance on columns"
type runs_variance_fields {
    id: Float
}

type subscription_root {
    "fetch data from the table: \"bot_balances\""
    bot_balances(
        "distinct select on columns"
        distinct_on: [bot_balances_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [bot_balances_order_by!],
        "filter the rows returned"
        where: bot_balances_bool_exp
    ): [bot_balances!]!
    "fetch aggregated fields from the table: \"bot_balances\""
    bot_balances_aggregate(
        "distinct select on columns"
        distinct_on: [bot_balances_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [bot_balances_order_by!],
        "filter the rows returned"
        where: bot_balances_bool_exp
    ): bot_balances_aggregate!
    "fetch data from the table: \"bot_balances\" using primary key columns"
    bot_balances_by_pk(id: Int!): bot_balances
    "fetch data from the table in a streaming manner: \"bot_balances\""
    bot_balances_stream(
        "maximum number of rows returned in a single batch"
        batch_size: Int!,
        "cursor to stream the results returned by the query"
        cursor: [bot_balances_stream_cursor_input]!,
        "filter the rows returned"
        where: bot_balances_bool_exp
    ): [bot_balances!]!
    "fetch data from the table: \"bot_v1\""
    bot_v1(
        "distinct select on columns"
        distinct_on: [bot_v1_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [bot_v1_order_by!],
        "filter the rows returned"
        where: bot_v1_bool_exp
    ): [bot_v1!]!
    "fetch aggregated fields from the table: \"bot_v1\""
    bot_v1_aggregate(
        "distinct select on columns"
        distinct_on: [bot_v1_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [bot_v1_order_by!],
        "filter the rows returned"
        where: bot_v1_bool_exp
    ): bot_v1_aggregate!
    "fetch data from the table: \"bot_v1\" using primary key columns"
    bot_v1_by_pk(id: uuid!): bot_v1
    "fetch data from the table in a streaming manner: \"bot_v1\""
    bot_v1_stream(
        "maximum number of rows returned in a single batch"
        batch_size: Int!,
        "cursor to stream the results returned by the query"
        cursor: [bot_v1_stream_cursor_input]!,
        "filter the rows returned"
        where: bot_v1_bool_exp
    ): [bot_v1!]!
    "fetch data from the table: \"runs\""
    runs(
        "distinct select on columns"
        distinct_on: [runs_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [runs_order_by!],
        "filter the rows returned"
        where: runs_bool_exp
    ): [runs!]!
    "fetch aggregated fields from the table: \"runs\""
    runs_aggregate(
        "distinct select on columns"
        distinct_on: [runs_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [runs_order_by!],
        "filter the rows returned"
        where: runs_bool_exp
    ): runs_aggregate!
    "fetch data from the table: \"runs\" using primary key columns"
    runs_by_pk(id: Int!): runs
    "fetch data from the table in a streaming manner: \"runs\""
    runs_stream(
        "maximum number of rows returned in a single batch"
        batch_size: Int!,
        "cursor to stream the results returned by the query"
        cursor: [runs_stream_cursor_input]!,
        "filter the rows returned"
        where: runs_bool_exp
    ): [runs!]!
}

"unique or primary key constraints on table \"bot_balances\""
enum bot_balances_constraint {
    "unique or primary key constraint on columns \"id\""
    bot_balances_pkey
}

"select columns of table \"bot_balances\""
enum bot_balances_select_column {
    "column name"
    balances
    "column name"
    bot_id
    "column name"
    chain_id
    "column name"
    id
}

"update columns of table \"bot_balances\""
enum bot_balances_update_column {
    "column name"
    balances
    "column name"
    bot_id
    "column name"
    chain_id
    "column name"
    id
}

"unique or primary key constraints on table \"bot_v1\""
enum bot_v1_constraint {
    "unique or primary key constraint on columns \"id\""
    bot_v1_pkey
}

"select columns of table \"bot_v1\""
enum bot_v1_select_column {
    "column name"
    id
    "column name"
    name
    "column name"
    pnl
    "column name"
    status
}

"update columns of table \"bot_v1\""
enum bot_v1_update_column {
    "column name"
    id
    "column name"
    name
    "column name"
    pnl
    "column name"
    status
}

"ordering argument of a cursor"
enum cursor_ordering {
    "ascending ordering of the cursor"
    ASC
    "descending ordering of the cursor"
    DESC
}

"column ordering options"
enum order_by {
    "in ascending order, nulls last"
    asc
    "in ascending order, nulls first"
    asc_nulls_first
    "in ascending order, nulls last"
    asc_nulls_last
    "in descending order, nulls first"
    desc
    "in descending order, nulls first"
    desc_nulls_first
    "in descending order, nulls last"
    desc_nulls_last
}

"unique or primary key constraints on table \"runs\""
enum runs_constraint {
    "unique or primary key constraint on columns \"id\""
    runs_pkey
}

"select columns of table \"runs\""
enum runs_select_column {
    "column name"
    arb
    "column name"
    bot_id
    "column name"
    created_at
    "column name"
    id
    "column name"
    ops
    "column name"
    updated_at
}

"update columns of table \"runs\""
enum runs_update_column {
    "column name"
    arb
    "column name"
    bot_id
    "column name"
    created_at
    "column name"
    id
    "column name"
    ops
    "column name"
    updated_at
}

scalar json

scalar jsonb

scalar numeric

scalar timestamptz

scalar uuid

"Boolean expression to compare columns of type \"Boolean\". All fields are combined with logical 'AND'."
input Boolean_comparison_exp {
    _eq: Boolean
    _gt: Boolean
    _gte: Boolean
    _in: [Boolean!]
    _is_null: Boolean
    _lt: Boolean
    _lte: Boolean
    _neq: Boolean
    _nin: [Boolean!]
}

"Boolean expression to compare columns of type \"Int\". All fields are combined with logical 'AND'."
input Int_comparison_exp {
    _eq: Int
    _gt: Int
    _gte: Int
    _in: [Int!]
    _is_null: Boolean
    _lt: Int
    _lte: Int
    _neq: Int
    _nin: [Int!]
}

"Boolean expression to compare columns of type \"String\". All fields are combined with logical 'AND'."
input String_comparison_exp {
    _eq: String
    _gt: String
    _gte: String
    "does the column match the given case-insensitive pattern"
    _ilike: String
    _in: [String!]
    "does the column match the given POSIX regular expression, case insensitive"
    _iregex: String
    _is_null: Boolean
    "does the column match the given pattern"
    _like: String
    _lt: String
    _lte: String
    _neq: String
    "does the column NOT match the given case-insensitive pattern"
    _nilike: String
    _nin: [String!]
    "does the column NOT match the given POSIX regular expression, case insensitive"
    _niregex: String
    "does the column NOT match the given pattern"
    _nlike: String
    "does the column NOT match the given POSIX regular expression, case sensitive"
    _nregex: String
    "does the column NOT match the given SQL regular expression"
    _nsimilar: String
    "does the column match the given POSIX regular expression, case sensitive"
    _regex: String
    "does the column match the given SQL regular expression"
    _similar: String
}

"Boolean expression to filter rows from the table \"bot_balances\". All fields are combined with a logical 'AND'."
input bot_balances_bool_exp {
    _and: [bot_balances_bool_exp!]
    _not: bot_balances_bool_exp
    _or: [bot_balances_bool_exp!]
    balances: json_comparison_exp
    bot_id: uuid_comparison_exp
    chain_id: String_comparison_exp
    id: Int_comparison_exp
}

"input type for incrementing numeric columns in table \"bot_balances\""
input bot_balances_inc_input {
    id: Int
}

"input type for inserting data into table \"bot_balances\""
input bot_balances_insert_input {
    balances: json
    bot_id: uuid
    chain_id: String
    id: Int
}

"on_conflict condition type for table \"bot_balances\""
input bot_balances_on_conflict {
    constraint: bot_balances_constraint!
    update_columns: [bot_balances_update_column!]! = []
    where: bot_balances_bool_exp
}

"Ordering options when selecting data from \"bot_balances\"."
input bot_balances_order_by {
    balances: order_by
    bot_id: order_by
    chain_id: order_by
    id: order_by
}

"primary key columns input for table: bot_balances"
input bot_balances_pk_columns_input {
    id: Int!
}

"input type for updating data in table \"bot_balances\""
input bot_balances_set_input {
    balances: json
    bot_id: uuid
    chain_id: String
    id: Int
}

"Streaming cursor of the table \"bot_balances\""
input bot_balances_stream_cursor_input {
    "Stream column input with initial value"
    initial_value: bot_balances_stream_cursor_value_input!
    "cursor ordering"
    ordering: cursor_ordering
}

"Initial value of the column from where the streaming should start"
input bot_balances_stream_cursor_value_input {
    balances: json
    bot_id: uuid
    chain_id: String
    id: Int
}

input bot_balances_updates {
    "increments the numeric columns with given value of the filtered values"
    _inc: bot_balances_inc_input
    "sets the columns of the filtered rows to the given values"
    _set: bot_balances_set_input
    "filter the rows which have to be updated"
    where: bot_balances_bool_exp!
}

"Boolean expression to filter rows from the table \"bot_v1\". All fields are combined with a logical 'AND'."
input bot_v1_bool_exp {
    _and: [bot_v1_bool_exp!]
    _not: bot_v1_bool_exp
    _or: [bot_v1_bool_exp!]
    id: uuid_comparison_exp
    name: String_comparison_exp
    pnl: numeric_comparison_exp
    status: Boolean_comparison_exp
}

"input type for incrementing numeric columns in table \"bot_v1\""
input bot_v1_inc_input {
    pnl: numeric
}

"input type for inserting data into table \"bot_v1\""
input bot_v1_insert_input {
    id: uuid
    name: String
    pnl: numeric
    status: Boolean
}

"on_conflict condition type for table \"bot_v1\""
input bot_v1_on_conflict {
    constraint: bot_v1_constraint!
    update_columns: [bot_v1_update_column!]! = []
    where: bot_v1_bool_exp
}

"Ordering options when selecting data from \"bot_v1\"."
input bot_v1_order_by {
    id: order_by
    name: order_by
    pnl: order_by
    status: order_by
}

"primary key columns input for table: bot_v1"
input bot_v1_pk_columns_input {
    id: uuid!
}

"input type for updating data in table \"bot_v1\""
input bot_v1_set_input {
    id: uuid
    name: String
    pnl: numeric
    status: Boolean
    supervisor_reported_ts: timestamptz
    reported_status: String
}

"Streaming cursor of the table \"bot_v1\""
input bot_v1_stream_cursor_input {
    "Stream column input with initial value"
    initial_value: bot_v1_stream_cursor_value_input!
    "cursor ordering"
    ordering: cursor_ordering
}

"Initial value of the column from where the streaming should start"
input bot_v1_stream_cursor_value_input {
    id: uuid
    name: String
    pnl: numeric
    status: Boolean
}

input bot_v1_updates {
    "increments the numeric columns with given value of the filtered values"
    _inc: bot_v1_inc_input
    "sets the columns of the filtered rows to the given values"
    _set: bot_v1_set_input
    "filter the rows which have to be updated"
    where: bot_v1_bool_exp!
}

"Boolean expression to compare columns of type \"json\". All fields are combined with logical 'AND'."
input json_comparison_exp {
    _eq: json
    _gt: json
    _gte: json
    _in: [json!]
    _is_null: Boolean
    _lt: json
    _lte: json
    _neq: json
    _nin: [json!]
}

input jsonb_cast_exp {
    String: String_comparison_exp
}

"Boolean expression to compare columns of type \"jsonb\". All fields are combined with logical 'AND'."
input jsonb_comparison_exp {
    _cast: jsonb_cast_exp
    "is the column contained in the given json value"
    _contained_in: jsonb
    "does the column contain the given json value at the top level"
    _contains: jsonb
    _eq: jsonb
    _gt: jsonb
    _gte: jsonb
    "does the string exist as a top-level key in the column"
    _has_key: String
    "do all of these strings exist as top-level keys in the column"
    _has_keys_all: [String!]
    "do any of these strings exist as top-level keys in the column"
    _has_keys_any: [String!]
    _in: [jsonb!]
    _is_null: Boolean
    _lt: jsonb
    _lte: jsonb
    _neq: jsonb
    _nin: [jsonb!]
}

"Boolean expression to compare columns of type \"numeric\". All fields are combined with logical 'AND'."
input numeric_comparison_exp {
    _eq: numeric
    _gt: numeric
    _gte: numeric
    _in: [numeric!]
    _is_null: Boolean
    _lt: numeric
    _lte: numeric
    _neq: numeric
    _nin: [numeric!]
}

"append existing jsonb value of filtered columns with new jsonb value"
input runs_append_input {
    arb: jsonb
    ops: jsonb
}

"Boolean expression to filter rows from the table \"runs\". All fields are combined with a logical 'AND'."
input runs_bool_exp {
    _and: [runs_bool_exp!]
    _not: runs_bool_exp
    _or: [runs_bool_exp!]
    arb: jsonb_comparison_exp
    bot_id: uuid_comparison_exp
    created_at: timestamptz_comparison_exp
    id: Int_comparison_exp
    ops: jsonb_comparison_exp
    updated_at: timestamptz_comparison_exp
}

"delete the field or element with specified path (for JSON arrays, negative integers count from the end)"
input runs_delete_at_path_input {
    arb: [String!]
    ops: [String!]
}

"delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array"
input runs_delete_elem_input {
    arb: Int
    ops: Int
}

"delete key/value pair or string element. key/value pairs are matched based on their key value"
input runs_delete_key_input {
    arb: String
    ops: String
}

"input type for incrementing numeric columns in table \"runs\""
input runs_inc_input {
    id: Int
}

"input type for inserting data into table \"runs\""
input runs_insert_input {
    arb: jsonb
    bot_id: uuid
    created_at: timestamptz
    id: Int
    ops: jsonb
    updated_at: timestamptz
}

"on_conflict condition type for table \"runs\""
input runs_on_conflict {
    constraint: runs_constraint!
    update_columns: [runs_update_column!]! = []
    where: runs_bool_exp
}

"Ordering options when selecting data from \"runs\"."
input runs_order_by {
    arb: order_by
    bot_id: order_by
    created_at: order_by
    id: order_by
    ops: order_by
    updated_at: order_by
}

"primary key columns input for table: runs"
input runs_pk_columns_input {
    id: Int!
}

"prepend existing jsonb value of filtered columns with new jsonb value"
input runs_prepend_input {
    arb: jsonb
    ops: jsonb
}

"input type for updating data in table \"runs\""
input runs_set_input {
    arb: jsonb
    bot_id: uuid
    created_at: timestamptz
    id: Int
    ops: jsonb
    updated_at: timestamptz
}

"Streaming cursor of the table \"runs\""
input runs_stream_cursor_input {
    "Stream column input with initial value"
    initial_value: runs_stream_cursor_value_input!
    "cursor ordering"
    ordering: cursor_ordering
}

"Initial value of the column from where the streaming should start"
input runs_stream_cursor_value_input {
    arb: jsonb
    bot_id: uuid
    created_at: timestamptz
    id: Int
    ops: jsonb
    updated_at: timestamptz
}

input runs_updates {
    "append existing jsonb value of filtered columns with new jsonb value"
    _append: runs_append_input
    "delete the field or element with specified path (for JSON arrays, negative integers count from the end)"
    _delete_at_path: runs_delete_at_path_input
    "delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array"
    _delete_elem: runs_delete_elem_input
    "delete key/value pair or string element. key/value pairs are matched based on their key value"
    _delete_key: runs_delete_key_input
    "increments the numeric columns with given value of the filtered values"
    _inc: runs_inc_input
    "prepend existing jsonb value of filtered columns with new jsonb value"
    _prepend: runs_prepend_input
    "sets the columns of the filtered rows to the given values"
    _set: runs_set_input
    "filter the rows which have to be updated"
    where: runs_bool_exp!
}

"Boolean expression to compare columns of type \"timestamptz\". All fields are combined with logical 'AND'."
input timestamptz_comparison_exp {
    _eq: timestamptz
    _gt: timestamptz
    _gte: timestamptz
    _in: [timestamptz!]
    _is_null: Boolean
    _lt: timestamptz
    _lte: timestamptz
    _neq: timestamptz
    _nin: [timestamptz!]
}

"Boolean expression to compare columns of type \"uuid\". All fields are combined with logical 'AND'."
input uuid_comparison_exp {
    _eq: uuid
    _gt: uuid
    _gte: uuid
    _in: [uuid!]
    _is_null: Boolean
    _lt: uuid
    _lte: uuid
    _neq: uuid
    _nin: [uuid!]
}
